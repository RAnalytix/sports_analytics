#batsman$Mins[batsman$Mins==NA] <- ""
#Regression for predicting missing Mins
# predicted_mins <- lm(Mins ~ Runs+BF,data = batsman[!is.na(batsman$Mins),])
# batsman$Mins[is.na(batsman$Mins)] <- round(predict(predicted_mins, batsman[is.na(batsman$Mins),]),0)
#Computing missing SRs
NewSR=round((batsman$Runs/batsman$BF)*100,2)
NewSR <- replace(NewSR, is.na(NewSR), 0)
batsman$SR=NewSR
batsmanComplete <- batsman
list(val=dim(batsmanComplete),names = names(batsmanComplete),h=head(batsmanComplete))
#Return the data frame
batsmanComplete
# write.csv(batsmanComplete,"Clean.csv")
}
#Function for capturing the basic statistics
Stats <- function(file,name){
batsman <- NULL
batsman <- DataClean(file)
noofMatches=nrow(batsman)
#Runs
#avgruns=round(mean(batsman$Runs),0)
#medruns=median(batsman$Runs)
#IQRruns=IQR(batsman$Runs)
#minruns=min(batsman$Runs)
#maxruns=max(batsman$Runs)
avgruns=paste("Average runs for ",name," - ",round(mean(batsman$Runs),0))
medruns=paste("Median of runs for ",name," - ",median(batsman$Runs))
IQRruns=paste("IQR of runs for ",name," - ",IQR(batsman$Runs))
minruns=paste("Lowest runs for ",name," - ",min(batsman$Runs))
maxruns=paste("Highest runs for ",name," - ",max(batsman$Runs))
print(avgruns)
print(medruns)
print(IQRruns)
print(minruns)
print(maxruns)
}
#Function to remove outliers
RemoveOutlier <- function(file) {
batsman <- NULL
batsman <- DataClean(file)
var <- batsman$Runs
var_name <- eval(substitute(var),eval(batsman))
outlier <- boxplot.stats(var_name)$out
var_name <- !var_name %in% outlier
batsman <-  batsman[var_name,]
batsman[complete.cases(batsman),]
}
#Function to get most played PositionBat
getmodeBat <- function(file) {
batsman <- NULL
batsman <- RemoveOutlier(file)
var <- batsman$Pos
uniqv <- unique(var)
uniqv[which.max(tabulate(match(var, uniqv)))]
}
Batting_Metrics <- function(file,name,team,role){
batsman <- RemoveOutlier(file)
#Games Played
countInningsBat <- batsman %>% summarise(len=length(Runs))
#Total Runs
TotalRunsBat <- batsman %>% summarise(runs=sum(Runs))
#Total Balls Faced
TotalBallsBat <- batsman %>% summarise(balls=sum(BF))
#Total Dismissals
countOut<- batsman$Dismissal[batsman$Dismissal!="not out"]
TotalDismissalBat <- length(countOut)
#Total Boundries
fours <- batsman %>% summarise(f= sum(X4s))
sixes <- batsman %>% summarise(s= sum(X6s))
TotalBoundriesBat <- fours+sixes
#Batting Average
BatAvg <- as.double(round(TotalRunsBat/TotalDismissalBat,2))
#Batting Strike Rate
BatSR <- as.double(round(TotalRunsBat/TotalBallsBat,2))
#Average Contribution
#Percentage Boundaries Hit
PerBoundariesHit <- as.double(round(TotalBoundriesBat/TotalBallsBat,2))
#PositionBat
PositionBat <- getmodeBat(file)
#Number of Wins
Wins <- batsman$result[batsman$result=="won"]
TotalWinsBat <- length(Wins)
#Percentage Wins (Y)
PerWinBat <- round(TotalWinsBat/countInningsBat,2)
PerWinBat <- PerWinBat * 100
TeamBat <- team
RoleBat <- role
NameBat <- name
newDFBat <- data.frame(NameBat,TeamBat,RoleBat,PositionBat,countInningsBat,TotalRunsBat,TotalBallsBat,BatAvg,BatSR,fours,sixes,TotalBoundriesBat,PerBoundariesHit,TotalDismissalBat,TotalWinsBat,PerWinBat)
names(newDFBat) <- c("Player","Team","Role","PositionBat","Game Played","Total Runs Scored","Total Balls Faced","Batting Average","Batting Strike Rate","Fours","Sixes","Total Boundries","Percentage Boundaries Hit","Total Dismissal","Total Wins","Percentage Wins")
newDFBat
}
#save(BatsmanFunctions, file="BatsmanFunctions.rda")
#setwd(dir="C:\\Users\\SIDDHESH\\Desktop\\Data Science - Aegis\\Capstone project\\Code\\Team Code\\PROJECT\\PROJECT\\DATA\\")
#Function for data cleaning
cleanBowlerData <- function(file) {
BPO <- Overs <- NULL
# Read the <bowler>.csv file
playerData <- read.csv(file,stringsAsFactor=FALSE,na.strings=c(NA,"-"))
playerData <- playerData[,-c(1,9)]
df <- playerData
# Remove rows with did not bowl
a <- df$Overs != "DNB"
bowler <- df[a,]
# Remove rows with 'TDNB' - team did not bowl
c <- bowler$Overs != "TDNB"
bowler <- bowler[c,]
# Get all complete cases
c <- complete.cases(bowler)
bowlerComplete <- bowler[c,]
# Normalize overs which had 8 balls per over to the number of overs if there 8 balls per over
if(names(bowlerComplete)[3] == "BPO") {
bowlerComplete <- mutate(bowlerComplete, Overs = ifelse(BPO==8,as.numeric(Overs)*8/6,Overs))
}
#Return the data frame
bowlerComplete
}
#Function to get most played position
getmodeBowl <- function(file) {
bowler <- NULL
bowler <- cleanBowlerData(file)
var <- bowler$Pos
uniqv <- unique(var)
uniqv[which.max(tabulate(match(var, uniqv)))]
}
Bowling_Metrics <- function(file,name,team,role){
bowler <- cleanBowlerData(file)
#Total Runs
TotalRuns <- bowler %>% summarise(runs=sum(Runs))
#Total Overs
TotalOvers <- bowler%>% summarise(over=sum(as.numeric(Overs)))
#Total Wickets
TotalWkts <- bowler %>% summarise(wkt=sum(Wkts))
#Total Maidans
TotalMaidanOvers <- bowler%>% summarise(over=sum(as.numeric(Mdns)))
#Total Wickets
TotalWkts <- bowler %>% summarise(wkt=sum(Wkts))
#Games Played
countInnings <- bowler %>% summarise(len=length(Runs))
#Economy
Economy <- round(TotalRuns/TotalOvers,2)
#Bowling Average
BowlAvg <- round(TotalRuns/TotalWkts,2)
#Dot balls
TotalDotBalls <- TotalMaidanOvers*6
#Balls Bowled
Overs <- do.call(rbind, strsplit(as.character(TotalOvers),"\\."))
whole <- as.numeric(Overs[1])
extra <- as.numeric(Overs[2])
if(is.na(extra))
{
TotalBalls <- whole*6
}else{
TotalBalls <- whole*6+extra
}
#Percentage Dot
PercDot <- round(TotalDotBalls/TotalBalls,2)
#Position
Position <- getmodeBowl(file)
#Number of Wins
Wins <- bowler$result[bowler$result=="won"]
TotalWins <- length(Wins)
#Percentage Wins (Y)
PerWin <- round(TotalWins/countInnings,2)
PerWin <- PerWin * 100
Team <- team
Role <- role
Name <- name
newBowlDF <- data.frame(Name,Team,Role,Position,countInnings,TotalOvers,TotalRuns,TotalBalls,TotalWkts,Economy,BowlAvg,TotalMaidanOvers,TotalDotBalls,PercDot,TotalWins,PerWin)
names(newBowlDF) <- c("Player","Team","Role","Position","Game Played","Total Overs","Total Runs","Balls Bowled","Total Wickets","Economy","Bowling Average","Total Maidan Overs","Total Dot Balls","Percentage Dot","Total Wins","Percentage Wins")
newBowlDF
}
#save(BowlerFunctions, file="BowlerFunctions.rda")
ids <- read.csv("playerid.csv")
ids
rows <-  nrow(ids)
for(i in 1:rows){
batfileName <- paste0(ids[i,1],"_bat.csv")
bowlfileName <- paste0(ids[i,1],"_bowl.csv")
playerName <- ids[i,1]
country <- ids[i,3]
role <- ids[i,4]
if(role != "Bowler"){
bat <- Batting_Metrics(batfileName,playerName,country,role)
if(exists("finalBattingMetrics"))
finalBattingMetrics<- rbind(finalBattingMetrics,bat)
else
finalBattingMetrics <- bat
}
if(role != "Batsman" & role != "WK-Batsman"){
bowl <-Bowling_Metrics(bowlfileName,playerName,country,role)
if(exists("finalBowlingMetrics"))
finalBowlingMetrics<- rbind(finalBowlingMetrics,bowl)
else
finalBowlingMetrics <- bowl
}
}
BattingData <-  finalBattingMetrics
BattingData$PositionBat <- as.factor(BattingData$PositionBat)
head(BattingData)
str(BattingData)
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
BattingData_n <- as.data.frame(lapply(BattingData[,5:15], normalize))
BattingData_n
Percentage_Wins <-BattingData[,16]
Percentage_Wins
BattingDataFinal <- cbind(BattingData[,1:4],BattingData_n,Percentage_Wins)
BattingDataFinal
str(BattingDataFinal)
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=FALSE,ntree=90)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
row.names(impBat)<-c("Game Played","Total Runs Scored","Total Balls Faced","Batting Average","Batting Strike Rate","Fours","Sixes","Total Boundries","Percentage Boundaries Hit","Total Dismissal")
importance(BattingData.rf, type=1,scale=TRUE)
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=1, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=2, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
varImportanceBat <- data.frame(Variables = row.names(impBat), Importance = round(impBat[ ,'%IncMSE'],2))
rankImportanceBat <- varImportanceBat %>%  mutate(Rank = paste0('#',dense_rank(desc(Importance))))
rankImportanceBat
ggplot(rankImportanceBat, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
rankImportanceBat$Variables <- as.character(rankImportanceBat$Variables)
rank1Bat=rankImportanceBat$Variables[rankImportanceBat$Rank=="#1"]
rank1Bat
Imp1Bat=rankImportanceBat$Importance[rankImportanceBat$Rank=="#1"]
Imp1Bat
rank2Bat=rankImportanceBat$Variables[rankImportanceBat$Rank=="#2"]
Imp2Bat=rankImportanceBat$Importance[rankImportanceBat$Rank=="#2"]
rank3Bat=rankImportanceBat$Variables[rankImportanceBat$Rank=="#3"]
Imp3Bat=rankImportanceBat$Importance[rankImportanceBat$Rank=="#3"]
rank4Bat=rankImportanceBat$Variables[rankImportanceBat$Rank=="#4"]
Imp4Bat=rankImportanceBat$Importance[rankImportanceBat$Rank=="#4"]
rank5Bat=rankImportanceBat$Variables[rankImportanceBat$Rank=="#5"]
Imp5Bat=rankImportanceBat$Importance[rankImportanceBat$Rank=="#5"]
for(i in 1:rows){
batfileName <- paste0(ids[i,1],"_bat.csv")
bowlfileName <- paste0(ids[i,1],"_bowl.csv")
playerName <- ids[i,1]
country <- ids[i,3]
role <- ids[i,4]
if(role != "Bowler"){
bat <- Batting_Metrics(batfileName,playerName,country,role)
if(exists("finalBattingMetrics"))
finalBattingMetrics<- rbind(finalBattingMetrics,bat)
else
finalBattingMetrics <- bat
}
if(role != "Batsman" & role != "WK-Batsman"){
bowl <-Bowling_Metrics(bowlfileName,playerName,country,role)
if(exists("finalBowlingMetrics"))
finalBowlingMetrics<- rbind(finalBowlingMetrics,bowl)
else
finalBowlingMetrics <- bowl
}
}
CurrentFormBatMetric <- finalBattingMetrics
CurrentFormBatMetric
CurrentFormBatMetric$rank1Bat
CurrentFormBatMetric[,rank1Bat]
CurrentFormBatMetric$rank1Bat==
rank1Bat
rank1Bat
CurrentFormBat <- finalBattingMetrics
CurrentFormBat <- finalBattingMetrics
attr1Bat=CurrentFormBatMetric[,rank1Bat]
attrimp1Bat=CurrentFormBatMetric[,Imp1Bat]
attr2Bat=CurrentFormBatMetric[,rank2Bat]
attrimp2Bat=CurrentFormBatMetric[,Imp2Bat]
attr3Bat=CurrentFormBatMetric[,rank3Bat]
attrimp3Bat=CurrentFormBatMetric[,Imp3Bat]
attr4Bat=CurrentFormBatMetric[,rank4Bat]
attrimp4Bat=CurrentFormBatMetric[,Imp4Bat]
attr5Bat=CurrentFormBatMetric[,rank5Bat]
attrimp5Bat=CurrentFormBatMetric[,Imp5Bat]
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4])
CurrentFormBatMetric
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,attrimp1Bat)
CurrentFormBatMetric
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,imp1Bat)
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,Imp1Bat)
CurrentFormBatMetric
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,Imp1Bat,attr2Bat,Imp2Bat,attr3Bat,Imp3Bat,attr4Bat,Imp4Bat,attr5Bat,Imp5Bat)
CurrentFormBatMetric
CurrentFormBat <- finalBattingMetrics
attr1Bat<-CurrentFormBatMetric[,rank1Bat]
names(attr1Bat)<-rank1Bat
CurrentFormBat <- finalBattingMetrics
attr1Bat<-CurrentFormBat[,rank1Bat]
names(attr1Bat)<-rank1Bat
attr2Bat<-CurrentFormBat[,rank2Bat]
attr3Bat<-CurrentFormBat[,rank3Bat]
attr4Bat<-CurrentFormBat[,rank4Bat]
attr5Bat<-CurrentFormBat[,rank5Bat]
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,Imp1Bat,attr2Bat,Imp2Bat,attr3Bat,Imp3Bat,attr4Bat,Imp4Bat,attr5Bat,Imp5Bat)
CurrentFormBatMetric
CurrentFormBat <- finalBattingMetrics
attr1Bat<-CurrentFormBat[,rank1Bat]
attr2Bat<-CurrentFormBat[,rank2Bat]
attr3Bat<-CurrentFormBat[,rank3Bat]
attr4Bat<-CurrentFormBat[,rank4Bat]
attr5Bat<-CurrentFormBat[,rank5Bat]
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,Imp1Bat,attr2Bat,Imp2Bat,attr3Bat,Imp3Bat,attr4Bat,Imp4Bat,attr5Bat,Imp5Bat)
names(CurrentFormBatMetric) <- c("Player","Team","Role","PositionBat",rank1Bat,"Importance",rank2Bat,"Importance",rank3Bat,"Importance",rank4Bat,"Importance",rank5Bat,"Importance")
CurrentFormBatMetric
CurrentFormBatMetric$BattingIndex <-rank1Bat*Imp1Bat+rank2Bat*Imp2Bat+rank3Bat*Imp3Bat+rank4Bat*Imp4Bat+rank5Bat*Imp5Bat
rank1Bat*Imp1Bat+rank2Bat*Imp2Bat+rank3Bat*Imp3Bat+rank4Bat*Imp4Bat+rank5Bat*Imp5Bat
rank1Bat*Imp1Bat
rank1BatxImp1Bat
rank1Bat+Imp1Bat
rank1Bat * Imp1Bat
CurrentFormBat[,rank1Bat] * Imp1Bat
CurrentFormBat <- finalBattingMetrics
attr1Bat<-CurrentFormBat[,rank1Bat]
attr2Bat<-CurrentFormBat[,rank2Bat]
attr3Bat<-CurrentFormBat[,rank3Bat]
attr4Bat<-CurrentFormBat[,rank4Bat]
attr5Bat<-CurrentFormBat[,rank5Bat]
BattingIndex <- CurrentFormBat[,rank1Bat]*Imp1Bat+CurrentFormBat[,rank2Bat]*Imp2Bat+CurrentFormBat[,rank3Bat]*Imp3Bat+CurrentFormBat[,rank4Bat]*Imp4Bat+CurrentFormBat[,rank5Bat]*Imp5Bat
CurrentFormBatMetric=data.frame(CurrentFormBat[,1:4],attr1Bat,Imp1Bat,attr2Bat,Imp2Bat,attr3Bat,Imp3Bat,attr4Bat,Imp4Bat,attr5Bat,Imp5Bat,BattingIndex)
names(CurrentFormBatMetric) <- c("Player","Team","Role","PositionBat",rank1Bat,"Importance",rank2Bat,"Importance",rank3Bat,"Importance",rank4Bat,"Importance",rank5Bat,"Importance","Batting Index")
CurrentFormBatMetric
a<-getTree(BattingData.rf)
summary(BattingData.rf)
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=FALSE,ntree=90)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
str(BattingDataFinal)
class(BattingData.rf)
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=FALSE,ntree=1)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=TRUE,ntree=1)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
a
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=TRUE,ntree=90)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
a
control <- trainControl(method="repeatedcv", number=10, repeats=3)
library(mlbench)
library(caret)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(seed)
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
customRF <- list(type = "regression", library = "randomForest", loop = NULL)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
customRF <- list(type = "regression", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
customRF <- list(type = "regression", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
customRF <- list(type = "Regression", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
customRF <- list(type = "Regression", library = "randomForest", loop = NULL)
customRF$parameters <- data.frame(parameter = c("mtry", "ntree"), class = rep("numeric", 2), label = c("mtry", "ntree"))
customRF$grid <- function(x, y, len = NULL, search = "grid") {}
customRF$fit <- function(x, y, wts, param, lev, last, weights, classProbs, ...) {
randomForest(x, y, mtry = param$mtry, ntree=param$ntree, ...)
}
customRF$predict <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata)
customRF$prob <- function(modelFit, newdata, preProc = NULL, submodels = NULL)
predict(modelFit, newdata, type = "prob")
customRF$sort <- function(x) x[order(x[,1]),]
customRF$levels <- function(x) x$classes
metric <- "Accuracy"
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
metric <- "RMSE"
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
summary(custom)
plot(custom)
custom
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=TRUE,ntree=2500,mtry=10)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
a
row.names(impBat)<-c("Game Played","Total Runs Scored","Total Balls Faced","Batting Average","Batting Strike Rate","Fours","Sixes","Total Boundries","Percentage Boundaries Hit","Total Dismissal")
importance(BattingData.rf, type=1,scale=TRUE)
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=1, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=2, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
varImportanceBat <- data.frame(Variables = row.names(impBat), Importance = round(impBat[ ,'%IncMSE'],2))
rankImportanceBat <- varImportanceBat %>%  mutate(Rank = paste0('#',dense_rank(desc(Importance))))
rankImportanceBat
metric <- "Rsquared"
control <- trainControl(method="repeatedcv", number=10, repeats=3)
tunegrid <- expand.grid(.mtry=c(1:15), .ntree=c(1000, 1500, 2000, 2500))
set.seed(123)
custom <- train(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal, method=customRF, metric=metric, tuneGrid=tunegrid, trControl=control)
custom
custom$pred
custom$results
custom$bestTune
mtry=custom$bestTune$mtry
ntree=custom$bestTune$ntree
plot(custom)
BattingData.rf <- randomForest(Percentage_Wins ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=FALSE,ntree=ntree,mtry=mtry)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
a <- getTree(BattingData.rf,k=1,labelVar = TRUE)
row.names(impBat)<-c("Game Played","Total Runs Scored","Total Balls Faced","Batting Average","Batting Strike Rate","Fours","Sixes","Total Boundries","Percentage Boundaries Hit","Total Dismissal")
importance(BattingData.rf, type=1,scale=TRUE)
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=1, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
varImpPlot(BattingData.rf, sort=TRUE, n.var=min(30, nrow(impBat)), type=2, class=NULL, scale=TRUE, main="Batting Metric Random Forest Importance Plot")
install.packages("corrplot")
library(corrplot)
corrplot(cor(BattingDataFinal), order = "hclust")
BattingDataFinal
corrplot(cor(BattingDataFinal[,5:15]), order = "hclust")
BattingData.rf <- randomForest(factor(Percentage_Wins) ~ Game.Played+Total.Runs.Scored+Total.Balls.Faced+Batting.Average+Batting.Strike.Rate+Fours+Sixes+Total.Boundries+Percentage.Boundaries.Hit+Total.Dismissal,data=BattingDataFinal,importance=TRUE,keep.forest=FALSE,ntree=ntree,mtry=mtry)
summary(BattingData.rf)
BattingData.rf$importance
BattingData.rf$importanceSD
impBat=importance(BattingData.rf,scale=TRUE)
impBat
Score=-1+X[,1]/sd(X[,1])+X[,2]/sd(X[,2])+ 0.5*X[,3]/sd(X[,3])-0.25*X[,4]/sd(X[,4])
install.packages("clusterGeneration")
install.packages("mnormt")
library(clusterGeneration)
library(mnormt)
S=genPositiveDefMat("eigen",dim=15)
S=genPositiveDefMat("unifcorrmat",dim=15)
X=rmnorm(n,varcov=S$Sigma)
Y=rbinom(n,size=1,prob=P)
P=exp(Score)/(1+exp(Score))
S=genPositiveDefMat("eigen",dim=15)
X=rmnorm(n,varcov=S$Sigma)
S=genPositiveDefMat("unifcorrmat",dim=15)
X=rmnorm(n,varcov=S$Sigma)
X=rmnorm(n)
X=rmnorm(n,varcov=S$Sigma)
Y=rbinom(n,size=1,prob=0.2)
Y=rbinom(n,size=1,prob=o.5)
Y=rbinom(n,size=1,prob=0.5)
rbinom(500, 1, 0.5)
rbinom(500, 1, 0.6)
